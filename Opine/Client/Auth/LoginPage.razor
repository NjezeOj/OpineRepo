@page "/loginpage"
@using System.Net.Mail 
@inject IAccountsRepository accountsRepository
@inject ICompanyRepository companyRepository
@inject ILoginService loginService
@inject NavigationManager navigationManager
@inject NotificationService NotificationService

<EditForm Model="loginInfo" OnSubmit="Login">
    <div class="login div1">
        <div class="logo1div">
            <img class="logo1" src="Images/loginwork.svg" />
        </div>

        <div class="login-h2">
            <h2> Get the answers you need</h2>
        </div>
        <div class="login-pitch">
            <p>
                Get the feedback you need using the best result analysis
                platform.
            </p>
        </div>
    </div>

    <div class="login div2">
        <div class="login-logo">
            <img src="Images/logo.svg" />
        </div>


        <div class="div2-child2">
            <h2>Welcome back</h2>
            <p>Login to manage your account</p>

            <div class="form-group">
                <div>
                    <InputText class="form-control border-secondary w-75" placeholder="Email" @bind-Value="@loginInfo.Email" />

                </div>
            </div>

            <div class="form-group">
                <div>
                    <InputPassword @bind-Value="@loginInfo.Password" />
                </div>
            </div>

            <div class="login-sign">
                <button class="btn btn-primary" type="submit">Login</button>
                <a href="/company/create" class="btn btn-outline-primary">Sign Up</a>
            </div>

        </div>
    </div>
</EditForm>



@code {
    private UserInfo loginInfo = new UserInfo();


    private async Task Login()
    {
        try
        {
            loginInfo.Email = loginInfo.Email.ToLower();
            IsValidEmail(loginInfo.Email);
            var userToken = await accountsRepository.Login(loginInfo);
            await loginService.Login(userToken.Token);
            navigationManager.NavigateTo("dashboard");
        }
        catch (Exception ex)
        {
            var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Login Failed", Detail = "Re-enter user credentials", Duration = 4000 };
            NotificationService.Notify(message);
            Console.WriteLine(ex.Message);
        }
    }

    bool IsValidEmail(string email)
    {
        try
        {
            var addr = new MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Login Failed", Detail = "Re-enter valid Email", Duration = 4000 };
            NotificationService.Notify(message);
            return false;
        }
    }
    //test@gmail.com
    //Aa123456! 
}

