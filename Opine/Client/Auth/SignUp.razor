@page "/signup"
@using System.Net.Mail
@inject IAccountsRepository accountsRepository
@inject ICompanyRepository companyRepository
@inject IUserRepository userRepository 
@inject ILoginService loginService
@inject QuestionService questionService
@inject NavigationManager navigationManager
@inject NotificationService NotificationService

<EditForm Model="userInfo" OnSubmit="CreateUser">
    <div class="login div1">
        <div class="logo1div">
            <img class="logo1" src="Images/signupwork.svg" />
        </div>

        <div class="login-h2">
            <h2> Get the answers you need</h2>
        </div>
        <div class="login-pitch d-flex justify-content-center">
            <p>
                Get the feedback you need using the best result analysis
                platform.
            </p>
        </div>
    </div>


    <div class="login ssdiv2">
        <div class="login-logo">
            <img src="Images/logo.svg" />
        </div>


        <div class="sdiv2-child2">
            <h2>Sign Up</h2>
            <p>Enter your details to create your account</p>
            <div class="form-group">
                <div>
                    <InputText class="form-control border-secondary w-75" placeholder="UserName (Case-Sensitive)" @bind-Value="@userInfo.CustomUserName" />

                </div>
            </div>
            <div class="form-group">
                <div>
                    <InputText class="form-control border-secondary w-75" placeholder="Email" @bind-Value="@userInfo.Email" />
                </div>
            </div>
            <div class="form-group">
                <div>
                    <InputText class="form-control border-secondary w-75" placeholder="Company(Lower-case)" @bind-Value="@userInfo.Company" />
                </div>
            </div>
            <div class="form-group">
                <div>
                    <InputPassword @bind-Value="@userInfo.Password" />
                    <p>Password must be at least 6 characters long, contain a capital letter, small letter, number and symbol</p>
                </div>
            </div>

            <div class="login-sign">
                <button class="btn btn-primary" type="submit">Sign Up</button>
            </div>

        </div>
    </div>
</EditForm>


@code {

    List<Company> Companies;
    List<UserDTO> Users;

    private UserInfo userInfo = new UserInfo();
    private PaginationDTO paginationDTO = new PaginationDTO() { Page = 1, RecordsPerPage = 1000000000 };


    protected override async Task OnInitializedAsync()
    {
        await LoadCompanies();
        Users = await userRepository.GetUsers();

    }

    private bool Check()
    {
        var companynameObj = Companies.Where(c => c.CompanyName == userInfo.Company).FirstOrDefault();
        var userObj = Users.Where(u => u.Email == userInfo.Email).FirstOrDefault();

        if (companynameObj != null && userObj == null) 
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private async Task CreateUser()
    {
        try
        {
            if (Check())
            {
                userInfo.CompanyId = Companies.Where(c => c.CompanyName == userInfo.Company).Select(c => c.Id).FirstOrDefault();
                userInfo.Email = userInfo.Email.ToLower();
                userInfo.Company = userInfo.Company.ToLower();
                IsValidEmail(userInfo.Email);

                var userToken = await accountsRepository.Register(userInfo); 
                await loginService.Login(userToken.Token);

                navigationManager.NavigateTo("/adminrole/2786");
                var message = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Registration Success", Duration = 4000 };
                NotificationService.Notify(message);
            }

            else
            {
                var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Registration Failed", Detail = "User already exists or Invalid Password format", Duration = 4000 };
                NotificationService.Notify(message);
            }

        }

        catch (Exception ex)
        {
            var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Registration Failed", Duration = 4000 };
            NotificationService.Notify(message);
            Console.WriteLine(ex.Message);
        }


    }

    private async Task LoadCompanies()
    {
        var paginatedResponses = await companyRepository.GetCompanies(paginationDTO);
        Companies = paginatedResponses.Response;

    }

    bool IsValidEmail(string email)
    {
        try
        {
            var addr = new MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Login Failed", Detail = "Re-enter valid Email", Duration = 4000 };
            NotificationService.Notify(message);
            return false;
        }
    }


}


    

