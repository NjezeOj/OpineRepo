@page "/users/edit/{userId}"
@using System.Threading;
@inject IUserRepository userRepository
@inject IDisplayMessage displayMessage
@inject NavigationManager navigationManager
@inject NotificationService NotificationService
@attribute [Authorize(Roles="Admin")]



<h3>EditUser</h3>

<div class="form-check-inline">
    <select class="form-control mb-2 mr-sm-2" @bind="selectedRole">
        <option value="0">--Select a Role--</option>
        @foreach (var role in roles)
        {
            <option value="@role.RoleName">@role.RoleName</option>
        }
    </select>

    <button class="btn btn-info mb-2 mr-sm-2" @onclick="AssignRole">Assign Role</button>
    <button class="btn btn-danger mb-2 mr-sm-2" @onclick="RemoveRole">Remove Role</button>
</div>

@code {
    [Parameter] public string UserId { get; set; }
    private List<RoleDTO> roles = new List<RoleDTO>();
    private string selectedRole = "0";

    protected override async Task OnInitializedAsync()
    {
        roles = await userRepository.GetRoles();
    }

    private async Task AssignRole() //async Task
    {
       
        if (selectedRole == "0")
        {
            var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "You Must Select a Role", Detail = "Choose A Valid Role Option", Duration = 4000 };
            NotificationService.Notify(message);
        }
        else
        {
            await userRepository.AssignRole(new EditRoleDTO() { RoleName = selectedRole, UserId = UserId });
            var message = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Role Assigned", Detail = "", Duration = 4000 };
            NotificationService.Notify(message);
            navigationManager.NavigateTo("users");
        }
    }

    private async Task RemoveRole()
    {
        if (selectedRole == "0")
        {
            var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "You Must Select a Role", Detail = "Choose A Valid Role Option", Duration = 4000 };
            NotificationService.Notify(message);

        }

        else
        {
            await userRepository.RemoveRole(new EditRoleDTO() { RoleName = selectedRole, UserId = UserId });
            var message = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Role Removed", Detail = "", Duration = 4000 };
            NotificationService.Notify(message);
            navigationManager.NavigateTo("users");
        }



    }
}
