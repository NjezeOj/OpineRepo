@page "/users"
@inject IUserRepository userRepository
@inject IUserService userService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin")]

<Pagination CurrentPage="@paginationDTO.Page" SelectedPage="SelectedPage"
            TotalAmountPages="totalAmountOfPages" />
<h3>IndexUsers</h3>

<GenericList List="CompanyUsers">
    <WholeListTemplate>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>User Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in CompanyUsers)
                {
                    @if (user.Email == identityName)
                    {
                        signIn = true;
                    }
                    else
                    {
                        signIn = false;
                    }
                    <tr>
                        @if (!signIn)
                        {
                            <td>
                                <a href="/users/edit/@user.UserId" class="btn btn-success">Edit</a>
                                <button class="btn btn-danger" @onclick="@(() => DeleteUser(user.UserId))">Delete</button>
                            </td>
                            <td>
                                @user.Email
                            </td>
                        }

                    </tr>
                }
            </tbody>
        </table>
    </WholeListTemplate>
</GenericList>

@code {
    List<UserDTO> Users;
    List<UserDTO> CompanyUsers;
    private int CompanyId;
    private bool signIn;
    private string identityName;
    PaginationDTO paginationDTO = new PaginationDTO();
    int totalAmountOfPages;

    [CascadingParameter] private Task<AuthenticationState> AuthenticationState { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Users = await userRepository.GetUsers();
        await GetCompanyId();
        await LoadUsers();
    }

    private async Task SelectedPage(int page)
    {
        paginationDTO.Page = page;
        await LoadUsers();
    }

    private async Task GetCompanyId()
    {

        var authState = await AuthenticationState;
        var user = authState.User;
        identityName = user.Identity.Name;


        if (user.Identity.IsAuthenticated)
        {

            CompanyId = Users.Where(u => u.Email == identityName).Select(u => u.CompanyId).FirstOrDefault();
            Console.WriteLine(CompanyId);
        }

    }

    private async Task LoadUsers()
    {
        var paginatedResponse = await userRepository.GetUsersById(paginationDTO, CompanyId);
        CompanyUsers = paginatedResponse.Response;
        totalAmountOfPages = paginatedResponse.TotalAmountPages;
    }



    private async Task DeleteUser(string id)
    {
        await userRepository.DeleteUser(id);
        await LoadUsers();
    }

}
