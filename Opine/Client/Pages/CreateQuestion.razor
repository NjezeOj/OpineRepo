@page "/question/create"
@inject IUserRepository userRepository
@inject IQuestionRepository questionRepository
@inject NavigationManager navigationManager
@inject NotificationService NotificationService
@attribute [Authorize]

<QuestionForm Question="question" OnValidSubmit="Create" />


@code {
    List<UserDTO> Users;
    private string identityName;
    private Question question = new Question();
    DateTime now = DateTime.Now;


    [CascadingParameter] private Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Users = await userRepository.GetUsers();
        await GetUser();
    }

    private async Task Create()
    {
        try
        {
            await questionRepository.CreateQuestion(question);
            question.A = "";
            question.B = "";
            question.C = "";
            question.D = "";
            question.Ques = "";
            var message = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Question Created", Detail = "", Duration = 4000 };
            NotificationService.Notify(message);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }


    }


    private async Task GetUser()
    {

        var authState = await AuthenticationState;
        var user = authState.User;
        identityName = user.Identity.Name;
        question.UploadTime = DateTime.Now;

        if (user.Identity.IsAuthenticated)
        {
            question.QuestionUserName = Users.Where(u => u.Email == identityName).Select(u => u.CustomUserName).FirstOrDefault();
            question.CompanyId = Users.Where(u => u.Email == identityName).Select(u => u.CompanyId).FirstOrDefault();

        }

    }


}

