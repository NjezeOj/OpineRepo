@page "/opinionpage"
@inject IQuestionRepository questionRepository
@inject IUserRepository userRepository


<section>
    <div id="flex-container" class="create-survey">
        <button>Surveys</button>
    </div>


    <div class="container">
        <h2>Voting Options</h2>
        <div class="d-flex justify-content-center">
            <div class="d-flex justify-content-around questionbg align-items-center py-3 mt-3 w-25">
                <div>
                    <h2>Birthday Parties</h2>
                    <p>by Chrsitopher Morgan</p>
                </div>
            </div>
        </div>

        <div class="px-5 mt-2">
            <h2>Options</h2>

            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        <input type="checkbox" aria-label="Checkbox for following text input">
                    </div>
                </div>
                <p class="mt-2 ml-2">Yesssss</p>
            </div>

            <div class="input-group mb-3">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        <input type="checkbox" aria-label="Checkbox for following text input">
                    </div>
                </div>
                <p class="mt-2 ml-2">Yesssss</p>
            </div>
        </div>
    </div>

</section>


@code {
    List<UserDTO> Users;
    private Question question = new Question();
    private int CompanyId;
    PaginationDTO paginationDTO = new PaginationDTO() { RecordsPerPage = 50 };

    [Parameter] public int QuestionId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> AuthenticationState { get; set; }

    //@page "/question/opinionpage/{QuestionId:int}"
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Users = await userRepository.GetUsers();
            await GetUser();
            await LoadQuestions();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task GetUser()
    {

        var authState = await AuthenticationState;
        var user = authState.User;
        var identityName = user.Identity.Name;


        if (user.Identity.IsAuthenticated)
        {

            CompanyId = Users.Where(u => u.Email == identityName).Select(u => u.CompanyId).FirstOrDefault();

        }

    }

    private async Task LoadQuestions()
    {
        var paginatedResponse = await questionRepository.GetQuestionsyId(paginationDTO, CompanyId);
        question = paginatedResponse.Response.Where(q => q.Id == QuestionId).FirstOrDefault();

    }
    //firs get questions by company id
    //second, ge question by questionId
}



