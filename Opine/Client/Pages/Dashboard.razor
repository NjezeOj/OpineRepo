@page "/dashboard"
@inject IUserRepository userRepository
@inject IQuestionRepository questionRepository
@inject NavigationManager navigationManager 

<div class="container">
    <div class="d-flex justify-content-center mb-4">
        <div class="dashcontcolor w-50 rounded-lg">
            <div class="ml-4 pt-4 pb-1">
                <h2>Hello @UserName</h2>
                <p class="mt-n2">It's good to see you</p>
            </div>
            
            <img class="dashboard-ill" src="Images/Illustration.png"/>
            
        </div>
    </div>
</div>

<div class="container">
    <div class="row justify-content-around">
        <div class="col-md-3 d-flex justify-content-center mt-4">
            <a href="responses"><img class="w-100" src="Images/cardresponses.png" /></a>
        </div>
        <div class="w-100"></div>
        <div class="col-md-3 mt-4 d-flex justify-content-center ">
            <a href="questions"><img class="w-100" src="Images/cardtopics.png" /></a>
        </div>
        <div class="col-md-3 mt-4 d-flex justify-content-center ">
            <a href="question/create"><img class="w-100" src="Images/cardquestions.png" /></a>
        </div>
    </div>
</div>
@code {
    List<UserDTO> Users;
    List<Question> Questions;
    private string IdentityName;
    private string UserName;
    private Question question = new Question();
    private Question randomQuestion = new Question();
    PaginationDTO paginationDTO = new PaginationDTO() { RecordsPerPage = 1000 };
    [CascadingParameter] private Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Users = await userRepository.GetUsers();
        await GetUser();
        
    }


    private async Task GetUser()
    {

        var authState = await AuthenticationState;
        var user = authState.User;
        IdentityName = user.Identity.Name;


        if (user.Identity.IsAuthenticated)
        {
            UserName = Users.Where(u => u.Email == IdentityName).Select(u => u.CustomUserName).FirstOrDefault();
            question.CompanyId = Users.Where(u => u.Email == IdentityName).Select(u => u.CompanyId).FirstOrDefault();

        }

    }

}
