@page "/tokenlist"
@inject ITokenRepository tokenRepository
@inject IUserRepository userRepository
@inject IEmailRepository emailRepository
@inject NotificationService NotificationService
@attribute [Authorize(Roles = "Admin")]

<h3> Token Table</h3>
<section>
    <div class="container">
        <GenericList List="Tokens">
            <WholeListTemplate>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            @*<th></th>*@
                            <th></th>
                            <th>Token</th>
                            <th>Email</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var token in Tokens)
                        {
                            <tr>
                                <td>
                                    <button class="btn btn-danger" @onclick="@(() => DeleteToken(token.Id))">Delete</button>
                                </td>
                                @*<td>
                                    <button class="btn btn-success" @onclick="@(() => SendEmail(token.Email))">Send Token Mail</button>
                                </td>*@
                                <td>
                                    @token.TokenId
                                </td>
                                <td>
                                    @token.Email
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </WholeListTemplate>
        </GenericList>
    </div>
</section>

<Pagination CurrentPage="@paginationDTO.Page" TotalAmountPages="totalAmountPages"
            SelectedPage="SelectedPage" />

@code {
    List<Token> Tokens;
    List<UserDTO> Users;
    PaginationDTO paginationDTO = new PaginationDTO() { RecordsPerPage = 2 };

    private int totalAmountPages;
    private string identityName;
    private Question question = new Question();
    private Contact contact = new Contact();
    [CascadingParameter] private Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Users = await userRepository.GetUsers();
            await GetUser();
            await LoadTokens();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task GetUser()
    {

        var authState = await AuthenticationState;
        var user = authState.User;
        identityName = user.Identity.Name;


        if (user.Identity.IsAuthenticated)
        {

            question.CompanyId = Users.Where(u => u.Email == identityName).Select(u => u.CompanyId).FirstOrDefault();

        }

    }


    private async Task LoadTokens()
    {
        var paginatedResponse = await tokenRepository.GetTokensyId(paginationDTO, question.CompanyId);
        Tokens = paginatedResponse.Response;
        totalAmountPages = paginatedResponse.TotalAmountPages;

    }

    private async Task SelectedPage(int page)
    {
        paginationDTO.Page = page;
        await LoadTokens();

    }

    private async Task DeleteToken(int id)
    {
        await tokenRepository.DeleteToken(id);
        await LoadTokens();
    }

    private async Task SendEmail(string userEmail)
    {
        @*contact.Name = identityName;
        contact.Email = identityName;
        contact.Message = $"Create your account using this signup link with the email given to the Admin /signup/{userEmail}";
        contact.RecipientName = "New User";
        contact.RecipientMail = "njezeojinnaka@gmail.com";

        var response = await emailRepository.SendEmail(contact);
        if (response)
        {
            var message = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Mail Sent", Detail = "", Duration = 4000 };
            NotificationService.Notify(message);
        }
        else
        {
            var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Mail not sent", Detail = "", Duration = 4000 };
            NotificationService.Notify(message);
        }*@
    }
}
