@page  "/question/{QuestionId:int}"
@inject IQuestionRepository questionRepository
@inject IUserRepository userRepository
@inject IVotedRepository votedRepository
@inject IPollRepository pollRepository
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@attribute [Authorize]

@if (@question.A == null)
{
    <RadzenProgressBar class="mt-5" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
}
else
{
    <section>
        <div>
            <h2>Voting Options</h2>
            <div class="d-flex justify-content-center">
                <div class="d-flex flex-column flex-lg-row justify-content-around questionbg align-items-center px-1 py-3 mt-3 w-auto">
                    <div class="d-flex flex-column"> 
                        <h2>@question.Ques</h2>
                        <div class="d-flex justify-content-center">
                            <p>by @question.QuestionUserName</p>
                        </div>
                    </div>
                </div>
            </div>

            <div class="px-5 mt-2">
                <h2>Options</h2>
                <div class="row">
                    <div class="col-xl-6">
                        <RadzenRadioButtonList @bind-Value=@value TValue="int" Orientation="Orientation.Vertical" Change=@((args) => OnChange(args, "RadioButtonList with vertical orientation"))>
                            <Items>
                                @if (question.A == null)
                                {

                                }
                                else
                                {
                                    <RadzenRadioButtonListItem Text=@question.A Value="1" />
                                }

                                @if (question.B == null)
                                {

                                }
                                else
                                {
                                    <RadzenRadioButtonListItem Text=@question.B Value="2" />
                                }

                                @if (question.C == null)
                                {

                                }
                                else
                                {
                                    <RadzenRadioButtonListItem Text=@question.C Value="3" />
                                }

                                @if (question.D == null)
                                {

                                }
                                else
                                {
                                    <RadzenRadioButtonListItem Text=@question.D Value="4" />
                                }
                            </Items>
                        </RadzenRadioButtonList>
                    </div>
                </div>
                <RadzenButton Text="Submit" Style="margin-bottom: 20px; width: 200px"
                              ButtonStyle="ButtonStyle.Success"
                              Click="ShowNotification" />
            </div>
        </div>
    </section>
}


@code {
    int value = 0;
    List<UserDTO> Users;
    List<Poll> Polls;
    List<Poll> CompanyPolls;
    private Question question = new Question();
    private Poll pollA = new Poll();
    private Poll pollB = new Poll();
    private Poll pollC = new Poll();
    private Poll pollD = new Poll();

    private Voted voted = new Voted();
    private int CompanyId;
    private string UserId;
    private bool hasVoted;
    PaginationDTO paginationDTO = new PaginationDTO() { RecordsPerPage = 10000 };

    [Parameter] public int QuestionId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> AuthenticationState { get; set; }


    void OnChange(int? value, string name)
    {
        Console.WriteLine($"{name} value changed to {value}");
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Users = await userRepository.GetUsers();
            await GetUser();
            await LoadQuestions();
            await LoadPolls();
            hasVoted = await HasVoted();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task GetUser()
    {

        var authState = await AuthenticationState;
        var user = authState.User;
        var identityName = user.Identity.Name;


        if (user.Identity.IsAuthenticated)
        {
            CompanyId = Users.Where(u => u.Email == identityName).Select(u => u.CompanyId).FirstOrDefault();
            UserId = Users.Where(u => u.Email == identityName).Select(u => u.UserId).FirstOrDefault();
        }

    }

    private async Task LoadQuestions()
    {
        var paginatedResponse = await questionRepository.GetQuestionsyId(paginationDTO, CompanyId);
        question = paginatedResponse.Response.Where(q => q.Id == QuestionId).FirstOrDefault();
    }

    private async Task LoadPolls()
    {
        CompanyPolls = await pollRepository.GetPollsById(CompanyId);
        Polls = CompanyPolls.Where(c => c.QuestionId == QuestionId).ToList();
    }


    private async Task ShowNotification()
    {

        if (hasVoted)
        {
            var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Opinion Not Recorded", Detail = "You've Selected An Opinion", Duration = 4000 };
            NotificationService.Notify(message);

        }
        else
        {
            await VoteLogic();
        }

    }
   
    private async Task VoteLogic()
    {
        if (Polls.Count == 0)
        {
            if (value == 1)
            {
                pollA.Count = 1;
                pollA.Option = "A";
                pollA.QuestionId = QuestionId;
                await pollRepository.CreatePoll(pollA);


                pollB.Count = 0;
                pollB.Option = "B";
                pollB.QuestionId = QuestionId;
                await pollRepository.CreatePoll(pollB);

                pollC.Count = 0;
                pollC.Option = "C";
                pollC.QuestionId = QuestionId;
                await pollRepository.CreatePoll(pollC);

                pollD.Count = 0;
                pollD.Option = "D";
                pollD.QuestionId = QuestionId;
                await pollRepository.CreatePoll(pollD);
            }
            if (value == 2)
            {
                pollA.Count = 0;
                pollA.Option = "A";
                pollA.QuestionId = QuestionId;
                await pollRepository.CreatePoll(pollA);

                pollB.Count = 1;
                pollB.Option = "B";
                pollB.QuestionId = QuestionId;
                await pollRepository.CreatePoll(pollB);

                pollC.Count = 0;
                pollC.Option = "C";
                pollC.QuestionId = QuestionId;
                await pollRepository.CreatePoll(pollC);

                pollD.Count = 0;
                pollD.Option = "D";
                pollD.QuestionId = QuestionId;
                await pollRepository.CreatePoll(pollD);
            }
            if (value == 3)
            {
                pollA.Count = 0;
                pollA.Option = "A";
                pollA.QuestionId = QuestionId;
                await pollRepository.CreatePoll(pollA);

                pollB.Count = 0;
                pollB.Option = "B";
                pollB.QuestionId = QuestionId;
                await pollRepository.CreatePoll(pollB);

                pollC.Count = 1;
                pollC.Option = "C";
                pollC.QuestionId = QuestionId;
                await pollRepository.CreatePoll(pollC);

                pollD.Count = 0;
                pollD.Option = "D";
                pollD.QuestionId = QuestionId;
                await pollRepository.CreatePoll(pollD);
            }
            if (value == 4)
            {
                pollA.Count = 0;
                pollA.Option = "A";
                pollA.QuestionId = QuestionId;
                await pollRepository.CreatePoll(pollA);

                pollB.Count = 0;
                pollB.Option = "B";
                pollB.QuestionId = QuestionId;
                await pollRepository.CreatePoll(pollB);

                pollC.Count = 0;
                pollC.Option = "C";
                pollC.QuestionId = QuestionId;
                await pollRepository.CreatePoll(pollC);

                pollD.Count = 1;
                pollD.Option = "D";
                pollD.QuestionId = QuestionId;
                await pollRepository.CreatePoll(pollD);
            }
        }
        else
        {
            if (value == 1)
            {
                pollA = Polls.Where(p => p.Option == "A").FirstOrDefault();
                pollA.Count += 1;
                await pollRepository.UpdatePoll(pollA);
            }
            if (value == 2)
            {
                pollB = Polls.Where(p => p.Option == "B").FirstOrDefault();
                pollB.Count += 1;
                await pollRepository.UpdatePoll(pollB);
            }
            if (value == 3)
            {
                pollC = Polls.Where(p => p.Option == "C").FirstOrDefault();
                pollC.Count += 1;
                await pollRepository.UpdatePoll(pollC);
            }
            if (value == 4)
            {
                pollD = Polls.Where(p => p.Option == "D").FirstOrDefault();
                pollD.Count += 1;
                await pollRepository.UpdatePoll(pollD);
            }

        }

        //UPDATING SUBMITTING VOTING LOGIC


        voted.Completed = true;
        voted.QuestionId = QuestionId;
        voted.UserId = UserId;
        voted.AppType = "web";

        await votedRepository.CreateVoted(voted);
        var message = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Successful Submission", Detail = "", Duration = 4000 };
        NotificationService.Notify(message);
        NavigationManager.NavigateTo("questions");
    }


    private async Task<bool> HasVoted()
    {
        var vote = await votedRepository.GetVotedById(QuestionId, UserId);

        if (vote == null)
        {
            return false;
        }
        else {
            
            return true;
        }

    }


}