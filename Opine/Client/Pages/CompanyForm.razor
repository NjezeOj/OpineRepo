@page "/company/create"
@inject ICompanyRepository companyRepository
@inject QuestionService questionService
@inject NavigationManager navigationManager
@inject NotificationService NotificationService

<EditForm Model="Company" OnValidSubmit="CreateCompany">
    <DataAnnotationsValidator />
    <div class="login div1">
        <div class="logo1div">
            <img class="logo1" src="Images/Group.png" />
        </div>

        <div class="login-h2">
            <h2> For your organisation</h2>
        </div>
        <div class="login-pitch">
            <p>
                Manage your company's data with advanced security and
                control, so you can exable your teams to share and
                collaborate safely.
            </p>
        </div>
    </div>


    <div class="login div2">
        <div class="login-logo">
            <img src="Images/logo.svg" />
        </div>


        <div class="div2-child2">
            <h2>Register Company</h2>
            <p>Enter company details to create account</p>
            <div class="form-group">
                <div>
                    <InputText class="form-control border-secondary w-75" placeholder="Company Name (case-sensitive)" @bind-Value="@Company.CompanyName" />
                    <ValidationMessage For="@(() => Company.CompanyName)" />
                </div>
            </div>
            <div class="form-group">
                <div>
                    <InputText class="form-control border-secondary w-75" placeholder="Company Email" @bind-Value="@Company.Email" />
                    <ValidationMessage For="@(() => Company.Email)" />
                </div>
            </div>

            <div class="login-sign">
                <button class="btn btn-primary" type="submit">Register</button>
            </div>
        </div>

    </div>


</EditForm>


@code {
    private Company Company = new Company();
    List<Company> Companies;
    PaginationDTO paginationDTO = new PaginationDTO() { RecordsPerPage = 1000000000 };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadCompanies();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private bool Check()
    {
        var companynameObj = Companies.Where(c => c.CompanyName == Company.CompanyName).FirstOrDefault();
        var companyemailObj = Companies.Where(c => c.Email == Company.Email).FirstOrDefault();

        if (companynameObj != null && companyemailObj != null)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    private void CreateCompany()
    {
        if (Check())
        {
            try
            {
                //Company.Email = Company.Email.ToLower();
                //await companyRepository.CreateCompany(company);
                questionService.SetCompObj(Company);
                navigationManager.NavigateTo("/signup");

                
            }

            catch (Exception ex)
            {
                var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Registeration Failed", Detail = ex.Message, Duration = 4000 };
                NotificationService.Notify(message);
            }
        }
        else
        {
            var message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Registeration Failed", Detail = "Email Or Company Name exists", Duration = 4000 };
            NotificationService.Notify(message);
        }

    }

    private async Task LoadCompanies()
    {
        var paginatedResponse = await companyRepository.GetCompanies(paginationDTO);
        Companies = paginatedResponse.Response;

    }



}

